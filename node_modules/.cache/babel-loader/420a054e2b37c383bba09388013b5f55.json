{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\raheem.azeezat\\\\Desktop\\\\e-voting\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\raheem.azeezat\\\\Desktop\\\\e-voting\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\raheem.azeezat\\\\Desktop\\\\e-voting\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\raheem.azeezat\\\\Desktop\\\\e-voting\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\raheem.azeezat\\\\Desktop\\\\e-voting\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\raheem.azeezat\\\\Desktop\\\\e-voting\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\raheem.azeezat\\\\Desktop\\\\e-voting\\\\src\\\\Components\\\\AddPost.js\";\nimport React, { Component } from 'react';\nimport { Form, Input, Button, Container } from 'semantic-ui-react'; // import Container from 'semantic-ui-react/dist/commonjs/elements/Container/Container';\n\nimport firebaseConf from './Firebase';\nimport { Offline } from 'react-detect-offline';\n\nvar AddPost =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AddPost, _Component);\n\n  function AddPost(props) {\n    var _this;\n\n    _classCallCheck(this, AddPost);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddPost).call(this, props));\n\n    _this.handleChange = function (e) {\n      _this.setState(_defineProperty({}, e.target.name, e.target.value));\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        isLoading: true\n      });\n      /**\r\n       * store all of everything thats being submitted,\r\n       * We do this by calling the ref method and passing\r\n       * in the destination we'd like them to be stored\r\n       */\n\n\n      var postsRef = firebaseConf.database().ref('posts');\n\n      var uniqueID = function uniqueID() {\n        return 'pst' + Math.random().toString(36).substr(2, 9).toUpperCase();\n      };\n\n      var posts = {\n        post: _this.state.postName,\n        id: uniqueID()\n      };\n      console.log(posts);\n      postsRef.push(posts).then(function () {\n        _this.showAlert('success', 'You have successfully added a new post');\n      }).then(function () {\n        _this.setState({\n          isLoading: false\n        });\n      }); // this.setState(this.baseState)\n    };\n\n    _this.state = {\n      postName: '',\n      isLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(AddPost, [{\n    key: \"showAlert\",\n    value: function showAlert(type, message) {\n      var _this2 = this;\n\n      this.setState({\n        alert: true,\n        alertData: {\n          type: type,\n          message: message\n        }\n      });\n      setTimeout(function () {\n        _this2.setState({\n          alert: false\n        });\n      }, 8000);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, this.state.alert && React.createElement(\"div\", {\n        className: \"alert alert-\".concat(this.state.alertData.type),\n        role: \"alert\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, this.state.alertData.message)), React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onChange: this.handleChange,\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        widths: \"equal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Form.Field, {\n        control: Input,\n        placeholder: \"Post name\",\n        name: \"postName\",\n        value: this.state.postName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })), React.createElement(Form.Field, {\n        control: Button,\n        loading: isLoading,\n        color: \"blue\",\n        disabled: !this.state.postName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Add Post\"))), React.createElement(Offline, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"marquee\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"You are currently offline,Connect and contimue the process\")));\n    }\n  }]);\n\n  return AddPost;\n}(Component);\n\nexport default AddPost;","map":{"version":3,"sources":["C:\\Users\\raheem.azeezat\\Desktop\\e-voting\\src\\Components\\AddPost.js"],"names":["React","Component","Form","Input","Button","Container","firebaseConf","Offline","AddPost","props","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","isLoading","postsRef","database","ref","uniqueID","Math","random","toString","substr","toUpperCase","posts","post","state","postName","id","console","log","push","then","showAlert","type","message","alert","alertData","setTimeout"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Form, Input, Button, Container} from 'semantic-ui-react';\r\n// import Container from 'semantic-ui-react/dist/commonjs/elements/Container/Container';\r\nimport firebaseConf from './Firebase';\r\nimport {Offline} from 'react-detect-offline';\r\n\r\nclass AddPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      postName: '',\r\n\r\n      isLoading: false,\r\n    };\r\n  }\r\n  showAlert(type, message) {\r\n    this.setState({\r\n      alert: true,\r\n      alertData: {type, message},\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({alert: false});\r\n    }, 8000);\r\n  }\r\n  handleChange = e => {\r\n    this.setState({[e.target.name]: e.target.value});\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.setState({isLoading: true});\r\n    /**\r\n     * store all of everything thats being submitted,\r\n     * We do this by calling the ref method and passing\r\n     * in the destination we'd like them to be stored\r\n     */\r\n    const postsRef = firebaseConf.database().ref('posts');\r\n    const uniqueID = function() {\r\n      return (\r\n        'pst' +\r\n        Math.random()\r\n          .toString(36)\r\n          .substr(2, 9)\r\n          .toUpperCase()\r\n      );\r\n    };\r\n\r\n    const posts = {\r\n      post: this.state.postName,\r\n      id: uniqueID(),\r\n    };\r\n\r\n    console.log(posts);\r\n\r\n    postsRef\r\n      .push(posts)\r\n      .then(() => {\r\n        this.showAlert('success', 'You have successfully added a new post');\r\n      })\r\n\r\n      .then(() => {\r\n        this.setState({isLoading: false});\r\n      });\r\n\r\n    // this.setState(this.baseState)\r\n  };\r\n  render() {\r\n    const {isLoading} = this.state;\r\n    return (\r\n      <div>\r\n        {this.state.alert && (\r\n          <div\r\n            className={`alert alert-${this.state.alertData.type}`}\r\n            role=\"alert\"\r\n          >\r\n            <div className=\"container\">{this.state.alertData.message}</div>\r\n          </div>\r\n        )}\r\n        <Container>\r\n          <Form onChange={this.handleChange} onSubmit={this.handleSubmit}>\r\n            <Form.Group widths=\"equal\">\r\n              <Form.Field\r\n                control={Input}\r\n                placeholder=\"Post name\"\r\n                name=\"postName\"\r\n                value={this.state.postName}\r\n              />\r\n            </Form.Group>\r\n            <Form.Field\r\n              control={Button}\r\n              loading={isLoading}\r\n              color=\"blue\"\r\n              disabled={!this.state.postName}\r\n            >\r\n              Add Post\r\n            </Form.Field>\r\n          </Form>\r\n        </Container>\r\n        <Offline>\r\n          <marquee>\r\n            You are currently offline,Connect and contimue the process\r\n          </marquee>\r\n        </Offline>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddPost;\r\n"]},"metadata":{},"sourceType":"module"}